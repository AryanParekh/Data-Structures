#include<stdio.h>
#include<stdlib.h>

typedef struct Node{
    int data;
    struct Node *left,*right;
    int balance_factor;
}Node;

Node *rr(Node *p){
    Node *root=p->right;
    p->right=root->left;
    root->left=p;
    return root;
}

Node *ll(Node *p){
    Node *root=p->left;
    p->left=root->right;
    root->right=p;
    return root;
}

Node *lr(Node *p){
    Node *root=p->right->left;
    p->right->left=root->right;
    root->right=p->right;
    p->right=root;
    return rr(p);
}

Node *rl(Node *p){
    Node *root=p->left->right;
    p->left->right=root->left;
    root->left=p->left;
    p->left=root;
    return ll(p);
}

int add(Node **p,int v){
    if(*p==NULL){
        Node *newnode=(Node*)malloc(sizeof(Node));
        newnode->data=v;
        newnode->left=newnode->right=NULL;
        newnode->balance_factor=0;
        *p=newnode;
    }
    else{
        if((*p)->data>v){ 
            if(add(&(*p)->left,v)){
                (*p)->balance_factor+=1;
                if((*p)->balance_factor==2){
                    if((*p)->left->balance_factor==1){ 
                        *p=ll(*p);
                        return 0;
                    }
                    else {
                        *p=rl(*p);
                        return 0;
                    }
                }
                return 1;
            }
        }
        else{ 
            if(add(&(*p)->right,v)){
                (*p)->balance_factor-=1;
                if((*p)->balance_factor==-2){
                    if((*p)->right->balance_factor==-1){ 
                        *p=rr(*p);
                        return 0;
                    }
                    else{ 
                        *p=lr(*p);
                        return 0;
                    }
                }
                return 1;
            }
        }
        
    }
}

int search(Node *p,int value){
    if (p==NULL) return 0;
    Node *temp=p;
    while(temp!=NULL){
        if (value<temp->data) temp=temp->left;
        else if (value>temp->data) temp=temp->right;
        else break;
    }
    if (temp==NULL) return 0;
    return 1;
}

void inorder(Node *p){
    if(p==NULL) return;
    else{
        inorder(p->left);
        printf("%d\t",p->data);
        inorder(p->right);
    }
}

void preorder(Node *p){
    if(p==NULL) return;
    else{
        printf("%d\t",p->data);
        preorder(p->left);
        preorder(p->right);
    }
}

int main(){
    Node *start=NULL;
    add(&start,10);
    add(&start,40);
    add(&start,30);
    add(&start,5);
    add(&start,70);
    printf("%d\n",search(start,5));
    preorder(start);
}