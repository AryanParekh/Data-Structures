#include <stdio.h>
#include <stdlib.h>

//Structure to store Node
typedef struct Node{
    int data;
    struct Node *next;
}Node;

//Adding element at the end of circular linked list
int add(Node **p,int value){
    Node *newnode=(Node*)malloc(sizeof(Node));
    if(newnode==NULL) return 0;
    newnode->data=value;
    if(*p==NULL){
        *p=newnode;
        newnode->next=*p;
    }
    else{
        Node *temp=*p;
        do temp=temp->next; while(temp->next!=*p);
        newnode->next=*p;
        temp->next=newnode;
    }
    return 1;
}

//Inserting element after a given element in circular linked list
int insertAfter(Node *p,int after,int value){
    if(p==NULL) return 0;
    if (p->data!=after){
        Node *temp=p;
        do p=p->next; while(p!=temp && p->data!=after);
        if (p==temp) return 0;
    }
    Node* newnode=(Node*)malloc(sizeof(Node));
    if(newnode==NULL) return 0;
    newnode->data=value;
    newnode->next=p->next;
    p->next=newnode;
    return 1;
}

//Inserting element before a given element in circular linked list
int insertBefore(Node **p,int before,int value){
    if (*p==NULL) return 0;
    if ((*p)->data==before){
        Node *newnode=malloc(sizeof(Node));
        if(newnode==NULL) return 0;
        newnode->data=value;
        newnode->next=*p;
        Node *temp=*p;
        do temp=temp->next; while(temp->next!=*p);
        temp->next=newnode;
        *p=newnode;
    }
    else{
        Node *prev=NULL;
        Node *temp=*p;
        do{
            prev=temp;
            temp=temp->next; 
        }while(temp!=*p && temp->data!=before);
        if (temp==*p) return 0;
        Node *newnode=(Node*)malloc(sizeof(Node));
        if(newnode==NULL) return 0;
        newnode->data=value;
        newnode->next=temp;
        prev->next=newnode;
    }
    return 1;
}

//Deleting element in single linked list
int delete(Node **p,int value){
    if(*p==NULL) return 0;
    Node *temp=*p;
    if((*p)->data==value){
        Node*t=*p;
        do t=t->next; while(t->next!=*p);
        *p=(*p)->next;
        t->next=*p;
    }
    else{
        Node *prev=NULL;
        do{
            prev=temp;
            temp=temp->next; 
        }while(temp!=*p && temp->data!=value);
        if (temp==*p) return 0;
        prev->next=temp->next;
    }
    free(temp);
    return 1;
}

//Displaying all elements in circular linked list
void display(Node *p){
    Node *temp=p;
    do{
        printf("%d\t",p->data);
        p=p->next;
    }while(p!=temp);
}

int main()
{
    Node *start=NULL;
    add(&start,10);
    add(&start,20);
    add(&start,30);
    add(&start,40);
    add(&start,50);
    insertAfter(start,30,35);
    insertBefore(&start,10,0);
    delete(&start,0);
    delete(&start,35);
    
    display(start);
    

    return 0;
}

