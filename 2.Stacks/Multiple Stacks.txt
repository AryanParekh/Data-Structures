#include <stdio.h>
#include <stdlib.h>
#define SIZE 20

//structure of double stack
typedef struct DoubleStack{
    int a[SIZE];
    int top1;
    int top2;
}DoubleStack;

//To initialize stack 1 and 2
void init(DoubleStack *s){
    s->top1=-1;
    s->top2=SIZE;
}

//to check if stack 1 is empty
int empty1(DoubleStack s){
    return s.top1==-1;
}
//to check if stack 2 is empty
int empty2(DoubleStack s){
    return s.top2==SIZE;
}

//to push into the stack 1
int push1(DoubleStack *s,int value){
    if(s->top1==SIZE-1 || s->top1==s->top2-1) return -1;
    s->a[++s->top1]=value;
    return 1;
}

int push2(DoubleStack *s,int value){
    if(s->top2==0 || s->top2==s->top1+1) return -1;
    s->a[--s->top2]=value;
    return 1;
}

//to pop the last inserted value out of stack 1
int pop1(DoubleStack *s){
    if(empty1(*s)) return -1;
    return s->a[s->top1--];
}

//to pop the last inserted value out of stack 2
int pop2(DoubleStack *s){
    if(empty2(*s)) return -1;
    return s->a[s->top2++];
}

//to peek the last inserted value in the stack 1
int peek1(DoubleStack s){
    if(empty1(s)) return -1;
    return s.a[s.top1];
}

//to peek the last inserted value in the stack 2
int peek2(DoubleStack s){
    if(empty2(s)) return -1;
    return s.a[s.top2];
}

//to display the stack 1
void display1(DoubleStack s){
    int i;
    for(i=0;i<=s.top1;i++) printf("%d\t",s.a[i]);
}

//to display the stack 2
void display2(DoubleStack s){
    int i;
    for(i=SIZE-1;i>=s.top2;i--) printf("%d\t",s.a[i]);
}

int main()
{
    DoubleStack s;
    init(&s);
    push1(&s,10);
    push1(&s,20);
    push1(&s,30);
    push1(&s,40);
    push1(&s,50);
    printf("%d\n",pop1(&s));
    printf("%d\n",peek1(s));
    display1(s);printf("\n");
    push2(&s,1);
    push2(&s,2);
    push2(&s,3);
    push2(&s,4);
    push2(&s,5);
    printf("%d\n",pop2(&s));
    printf("%d\n",peek2(s));
    display2(s);printf("\n");
    
    return 0;
}
